// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Venice.Models;

namespace Venice.Migrations
{
    [DbContext(typeof(VeniceDbContext))]
    [Migration("20181123080233_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Venice.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<long>("AreaId")
                        .HasColumnName("AreaID");

                    b.Property<long>("CityId")
                        .HasColumnName("CityID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<long>("RegionId")
                        .HasColumnName("RegionID");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Venice.Models.AddToCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("AddToCarts");
                });

            modelBuilder.Entity("Venice.Models.AddToCartProduct", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<long>("AddToCartId")
                        .HasColumnName("AddToCartID");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("AddToCartId");

                    b.HasIndex("ProductId");

                    b.ToTable("AddToCartProducts");
                });

            modelBuilder.Entity("Venice.Models.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<long?>("AddressId")
                        .HasColumnName("AddressID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsConfirmed");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("UserID")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("Venice.Models.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Venice.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("CategoryDisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryID");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Venice.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Citie");
                });

            modelBuilder.Entity("Venice.Models.History", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<long>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Historys");
                });

            modelBuilder.Entity("Venice.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderDate");

                    b.Property<long?>("ShippingAddressId")
                        .HasColumnName("ShippingAddressID");

                    b.Property<long>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Venice.Models.OrderDetails", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<long>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18, 4)");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Venice.Models.PageContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("ContentDetail")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<long?>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<long?>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("Venice.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("AditionalInformation")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<long>("CategoryId")
                        .HasColumnName("CategoryID");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 4)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ExternalLink")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("ExternalLinkHeight");

                    b.Property<int?>("ExternalLinkWeight");

                    b.Property<int>("MinStockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("PreviousPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 4)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18, 4)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ProductDetail")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("StockQuantiry")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<long>("UnitId")
                        .HasColumnName("UnitID");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Venice.Models.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<byte[]>("Data")
                        .IsRequired();

                    b.Property<string>("ImageExtension");

                    b.Property<bool>("IsPrimaryImage");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Venice.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Venice.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool>("IsApproved");

                    b.Property<int>("Point")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.Property<long>("UserId")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Venice.Models.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<int>("QuantiryPerUnit")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Venice.Models.WishList", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("ID");

                    b.Property<long>("ProductId")
                        .HasColumnName("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Venice.Models.Address", b =>
                {
                    b.HasOne("Venice.Models.Area", "Area")
                        .WithMany("Address")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Address_Area");

                    b.HasOne("Venice.Models.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_City");

                    b.HasOne("Venice.Models.Region", "Region")
                        .WithMany("Address")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Address_Region");
                });

            modelBuilder.Entity("Venice.Models.AddToCartProduct", b =>
                {
                    b.HasOne("Venice.Models.AddToCart", "AddToCart")
                        .WithMany("AddToCartProduct")
                        .HasForeignKey("AddToCartId")
                        .HasConstraintName("FK_AddToCartProduct_AddToCart");

                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("AddToCartProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_AddToCartProduct_Product");
                });

            modelBuilder.Entity("Venice.Models.ApplicationUser", b =>
                {
                    b.HasOne("Venice.Models.Address", "Address")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_ApplicationUser_Address_AddressID_ID");
                });

            modelBuilder.Entity("Venice.Models.Category", b =>
                {
                    b.HasOne("Venice.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_ID_ParentCategoryID");
                });

            modelBuilder.Entity("Venice.Models.History", b =>
                {
                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("History")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_History_Product_ProductID_ID");

                    b.HasOne("Venice.Models.ApplicationUser", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_History_ApplicationUser_UserID_ID");
                });

            modelBuilder.Entity("Venice.Models.Order", b =>
                {
                    b.HasOne("Venice.Models.Address", "ShippingAddress")
                        .WithMany("Order")
                        .HasForeignKey("ShippingAddressId")
                        .HasConstraintName("FK_Order_Address1");

                    b.HasOne("Venice.Models.ApplicationUser", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_ApplicationUser");
                });

            modelBuilder.Entity("Venice.Models.OrderDetails", b =>
                {
                    b.HasOne("Venice.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Product");
                });

            modelBuilder.Entity("Venice.Models.PageContent", b =>
                {
                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("PageContent")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PageContent_Product_ProductID_ID");

                    b.HasOne("Venice.Models.ApplicationUser", "User")
                        .WithMany("PageContent")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PageContent_ApplicationUser_UserID_ID");
                });

            modelBuilder.Entity("Venice.Models.Product", b =>
                {
                    b.HasOne("Venice.Models.Unit", "Unit")
                        .WithMany("Product")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Product_Unit_ID_UnitID");
                });

            modelBuilder.Entity("Venice.Models.ProductImage", b =>
                {
                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("ProductImage")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductImage_Product_ID_ProductID");
                });

            modelBuilder.Entity("Venice.Models.Review", b =>
                {
                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("Review")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Review_Product_ProductID_ID");
                });

            modelBuilder.Entity("Venice.Models.WishList", b =>
                {
                    b.HasOne("Venice.Models.Product", "Product")
                        .WithMany("WishList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_WishList_Product");
                });
#pragma warning restore 612, 618
        }
    }
}
